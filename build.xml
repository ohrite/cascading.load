<?xml version="1.0"?>

<!--
  ~ Copyright (c) 2010 Concurrent, Inc. All Rights Reserved.
  ~
  ~ Project and contact information: http://www.concurrentinc.com/
  -->

<project name="cascading.load" default="build" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- load properties first -->
  <property file="../build.properties"/>
  <property file="./build.properties"/>

  <property name="src.dir" location="${basedir}/src/java"/>
  <property name="src.data" location="${basedir}/src/data"/>
  <property name="src.test" location="${basedir}/src/test"/>

  <available file="${src.dir}" type="dir" property="main.available"/>
  <available file="${src.test}" type="dir" property="test.available"/>

  <property name="lib.dir" location="${basedir}/lib"/>
  <property name="compile.lib.dir" location="${lib.dir}/compile"/>
  <property name="runtime.lib.dir" location="${lib.dir}/runtime"/>
  <property name="test.lib.dir" location="${lib.dir}/test"/>

  <property name="build.dir" location="${basedir}/build/"/>
  <property name="build.classes" location="${build.dir}/classes"/>
  <property name="build.test" location="${build.dir}/test"/>

  <property name="test.results" location="${build.dir}/testresults"/>
  <property name="test.showoutput" value="no"/>

  <property name="dist" location="dist"/>

  <fileset id="lib.compile.fileset" dir="${compile.lib.dir}">
    <include name="*.jar"/>
  </fileset>

  <fileset id="lib.runtime.fileset" dir="${runtime.lib.dir}">
    <include name="*.jar"/>
  </fileset>

  <fileset id="lib.test.fileset" dir="${test.lib.dir}">
    <include name="*.jar"/>
  </fileset>


  <path id="project.class.path">
    <pathelement location="${build.classes}"/>
    <pathelement location="${build.test}"/>

    <fileset refid="lib.compile.fileset"/>
    <fileset refid="lib.runtime.fileset"/>
    <fileset refid="lib.test.fileset"/>
  </path>

  <target name="clean">

    <echo message="cleaning..."/>
    <delete dir="${build.dir}"/>
    <delete dir="${dist}"/>
    <delete dir="${ant.project.name}.tgz"/>

  </target>

  <target name="compile">

    <echo message="building..."/>
    <mkdir dir="${build.classes}"/>

    <javac srcdir="${src.dir}" destdir="${build.classes}" verbose="off" debug="true" includeantruntime="false">
      <classpath refid="project.class.path"/>
    </javac>

    <copy todir="${build.classes}">
      <fileset dir="${src.dir}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>

    <copy todir="${build.classes}">
      <fileset dir="${src.data}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>

  </target>

  <target name="compile-test">

    <echo message="building..."/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${lib.dir}"/>

    <javac srcdir="${src.test}" destdir="${build.test}" verbose="off" includeantruntime="false">
      <classpath refid="project.class.path"/>
    </javac>

    <copy todir="${build.test}">
      <fileset dir="${src.test}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>

  </target>

  <!-- runs roundup.sh test plans -->
  <target name="sh-test" description="run the shell unit test plans">
    <exec executable="/bin/sh" failonerror="true">
      <arg value="${src.test}/sh/helper/roundup.sh"/>
      <arg value="${src.test}/sh/core/*_test.sh"/>
      <arg value="${src.test}/sh/cascading/*_test.sh"/>
      <arg value="${src.test}/sh/*_test.sh"/>
    </exec>
  </target>

  <!-- runs JUnit tests -->
  <target name="test" depends="compile,compile-test,sh-test" description="run the unit tests">
    <echo message="running all tests..."/>

    <mkdir dir="build/test/log"/>
    <mkdir dir="${test.results}"/>

    <junit printsummary="true" showoutput="${test.showoutput}" fork="yes" haltonerror="no" haltonfailure="no" dir="."
           maxmemory="756m">

      <sysproperty key="test.cluster.enabled" value="${test.cluster.enabled}"/>
      <sysproperty key="test.build.data" value="${log.data}"/>
      <sysproperty key="hadoop.log.dir" value="build/test/log"/>

      <!--<jvmarg value="-Xdebug"/>--><!--<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"/>-->

      <classpath>
        <path refid="project.class.path"/>
        <pathelement path="${java.class.path}"/>
      </classpath>
      <formatter type="plain" usefile="true"/>

      <test name="${testcase}" todir="${test.results}" if="testcase" haltonfailure="${test.haltonerror}"/>
      <batchtest todir="${test.results}" haltonfailure="${test.haltonerror}" unless="testcase">
        <fileset dir="${src.test}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>

  </target>

  <tstamp/>

  <target name="stamp-jar" depends="jar">
    <move file="${build.dir}/${ant.project.name}.jar"
          tofile="${build.dir}/${ant.project.name}-${DSTAMP}.jar"/>
  </target>

  <target name="jar" depends="compile" description="creates a Hadoop ready jar will all dependencies">

    <!-- copy Cascading classes and libraries -->
    <copy todir="${build.classes}/lib">
      <fileset refid="lib.compile.fileset"/>
      <mapper type="flatten"/>
    </copy>

    <jar jarfile="${build.dir}/${ant.project.name}.jar">
      <fileset dir="${build.classes}"/>
      <manifest>
        <attribute name="Main-Class" value="${ant.project.name}/Main"/>
      </manifest>
    </jar>

  </target>

  <target name="dist" depends="clean,jar,stamp-jar" description="packages current project">

    <mkdir dir="${dist}"/>

    <copy todir="${dist}">

      <fileset dir=".">
        <include name="data/**"/>
        <include name="src/**"/>
        <include name="lib/**"/>
        <include name="build.xml"/>
        <include name="README.TXT"/>
      </fileset>

      <fileset dir="${build.dir}">
        <include name="*.jar"/>
      </fileset>

    </copy>

  </target>

  <target name="tar" depends="dist" description="creates an archive of current project">
    <tar destfile="${ant.project.name}-${DSTAMP}.tgz"
         compression="gzip">
      <tarfileset dir="dist/" prefix="${ant.project.name}-${DSTAMP}">
        <include name="**/**"/>
      </tarfileset>
    </tar>
  </target>

  <target name="s3-package" if="package.remote.bucket">

    <taskdef name="S3Upload" classname="dak.ant.taskdefs.S3Upload"/>

    <echo message="http://${package.remote.bucket}/multitool/${ant.project.name}-${DSTAMP}.tgz"
          file="${ant.project.name}-current.txt"/>

    <S3Upload verbose="true"
              accessId="${package.aws.accessId}"
              secretKey="${package.aws.secretKey}"
              bucket="${package.remote.bucket}"
              prefix="${ant.project.name}/"
              publicRead="true">
      <fileset file="${ant.project.name}-${DSTAMP}.tgz"/>
      <fileset file="${ant.project.name}-current.txt"/>
    </S3Upload>

    <property name="package.remote.port" value="22"/>
    <scp file="${ant.project.name}-current.txt"
         remoteTofile="${package.remote.path}/${ant.project.name}/${ant.project.name}-${DSTAMP}.tgz"
         keyfile="${package.remote.keyfile}"
         passphrase="" port="${package.remote.port}" trust="true"/>

    <delete file="${ant.project.name}-current.txt"/>

  </target>

  <target name="publish" depends="clean,test,tar,s3-package"/>

  <target name="retrieve">

    <ivy:settings id="ivy.conjars.settings" url="http://conjars.org/repo/ivysettings.xml"/>

    <!--<ivy:cleancache settingsRef="ivy.conjars.settings"/>-->

    <!--<ivy:resolve settingsRef="ivy.conjars.settings" transitive="false"/>-->

    <ivy:retrieve settingsRef="ivy.conjars.settings"
                  conf="compile,runtime,test"
                  pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" sync="true"/>

  </target>

</project>